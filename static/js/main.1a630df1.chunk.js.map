{"version":3,"sources":["components/ProgressStep.tsx","utils/index.ts","components/TickIcon.tsx","components/ProgressStage.tsx","components/ProgressPanel.tsx","components/RandomTextCard.tsx","services/ProgressService.ts","services/UselessFactService.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ProgressStep","index","step","disabled","onChange","id","name","replace","toLowerCase","useState","completed","checked","setChecked","className","type","cx","ev","target","htmlFor","TickIcon","xmlns","viewBox","fill","d","ProgressPanel","stage","onStepChange","stepIndex","value","steps","map","progressService","onComplete","progress","setStartupProgress","status","setStatus","activeStepIndex","setActiveStepIndex","useEffect","loading","loadStartupProgress","then","edit","catch","_err","error","onStageChange","stages","newProgress","saveStartupProgress","firstUncompletedStageIndex","findIndex","some","undefined","finish","ProgressStage","RandomTextCard","getRandomText","onOk","text","setText","randomText","onClick","DEFAULT_STARTUP_PROGRESS","STARTUP_PROFRESS_KEY","LocalStorageProgressService","initStartupProgress","localStorage","setItem","JSON","stringify","item","getItem","parse","getUselessFact","a","Promise","resolve","reject","fetch","response","json","data","App","setCompleted","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1a630df1.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { stringToKebab } from \"../utils\";\nimport cx from \"classnames\";\nimport { StartupStep } from \"./ProgressPanel\";\n\nconst ProgressStep = ({\n  index,\n  step,\n  disabled,\n  onChange,\n}: {\n  index: number;\n  step: StartupStep;\n  disabled: boolean;\n  onChange: (index: number, value: boolean) => void;\n}) => {\n  const id = `checkbox-${stringToKebab(step.name)}`;\n\n  const [checked, setChecked] = useState(step.completed);\n\n  return (\n    <div className=\"relative flex items-start\">\n      <div className=\"flex items-center h-5\">\n        <input\n          id={id}\n          name={id}\n          type=\"checkbox\"\n          checked={checked}\n          disabled={disabled}\n          className={cx(\n            \"focus:ring-indigo-500 h-4 w-4 text-indigo-600 border-gray-300 rounded\",\n            {\n              \"cursor-pointer\": !disabled,\n            }\n          )}\n          onChange={(ev) => {\n            const { checked } = ev.target;\n            setChecked(checked);\n            onChange(index, checked);\n          }}\n        />\n      </div>\n      <div className=\"ml-3 text-sm\">\n        <label\n          htmlFor={id}\n          className={cx(\"font-medium select-none \", {\n            \"text-gray-500\": disabled,\n            \"text-gray-800 cursor-pointer\": !disabled,\n          })}\n        >\n          {step.name}\n        </label>\n      </div>\n    </div>\n  );\n};\n\nexport default ProgressStep;\n","export const stringToKebab =( str:string) => str.replace(/\\W+/g, '-').toLowerCase();","import React from \"react\";\n\nconst TickIcon = () => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 470 470\"\n      className=\"text-gray-900 w-7 h-7 inline-flex\"\n    >\n      <path\n        fill=\"currentColor\"\n        d=\"M462.5 96.193l-21.726-21.726c-8.951-8.95-23.562-8.95-32.59 0L180.368 302.361l-119.34-119.34c-8.95-8.951-23.562-8.951-32.589 0L6.712 204.747c-8.95 8.951-8.95 23.562 0 32.589L163.997 394.62c4.514 4.514 10.327 6.809 16.218 6.809s11.781-2.295 16.219-6.809L462.27 128.783c9.18-9.103 9.18-23.638.23-32.59z\"\n      />\n    </svg>\n  );\n};\n\nexport default TickIcon;\n","import React from \"react\";\nimport { StartupStage } from \"./ProgressPanel\";\nimport ProgressStep from \"./ProgressStep\";\nimport TickIcon from \"./TickIcon\";\n\nconst ProgressPanel = ({\n  index,\n  stage,\n  disabled,\n  completed,\n  onChange,\n}: {\n  index: number;\n  stage: StartupStage;\n  disabled: boolean;\n  completed: boolean;\n  onChange: (index: number, stage: StartupStage) => void;\n}) => {\n  const onStepChange = (stepIndex: number, value: boolean) => {\n    const { name, steps } = stage;\n    steps[stepIndex].completed = value;\n    const newStage = { name, steps };\n    onChange(index, newStage);\n  };\n\n  return (\n    <li>\n      <div className=\"flex mt-5 mb-4\">\n        <span className=\"text-white text-sm font-semibold bg-gray-900 w-7 h-7 rounded-full inline-flex items-center justify-center select-none\">\n          {index + 1}\n        </span>\n        <span className=\"text-xl font-bold ml-3 mr-auto select-none\">\n          {stage.name}\n        </span>\n        {completed ? <TickIcon /> : null}\n      </div>\n      <ul className=\"space-y-2\">\n        {stage.steps.map((step, index) => (\n          <li key={`step-${index}`}>\n            <ProgressStep\n              index={index}\n              step={step}\n              onChange={onStepChange}\n              disabled={disabled}\n            />\n          </li>\n        ))}\n      </ul>\n    </li>\n  );\n};\n\nexport default ProgressPanel;\n","import React, { useState, useEffect } from \"react\";\nimport ProgressStage from \"./ProgressStage\";\n\nexport interface StartupStep {\n  name: string;\n  completed: boolean;\n}\n\nexport interface StartupStage {\n  name: string;\n  steps: StartupStep[];\n}\n\nexport interface StartupProgress {\n  name: string;\n  stages: StartupStage[];\n}\n\nexport interface StartupProgressService {\n  initStartupProgress: () => Promise<StartupProgress>;\n  loadStartupProgress: () => Promise<StartupProgress>;\n  saveStartupProgress: (progress: StartupProgress) => Promise<void>;\n}\n\ninterface PanelStatus {\n  loading?: boolean;\n  error?: boolean;\n  edit?: boolean;\n  finish?: boolean;\n}\n\nconst ProgressPanel = ({\n  progressService,\n  onComplete,\n}: {\n  progressService: StartupProgressService;\n  onComplete: () => void;\n}) => {\n  const [progress, setStartupProgress] = useState({} as StartupProgress);\n  const [status, setStatus] = useState({} as PanelStatus);\n  const [activeStepIndex, setActiveStepIndex] = useState(null as null | number);\n\n  useEffect(() => {\n    setStatus({ loading: true });\n    progressService\n      .loadStartupProgress()\n      .then((progress) => {\n        setStartupProgress(progress);\n        setStatus({ edit: true });\n      })\n      .catch((_err) => setStatus({ error: true }));\n  }, [progressService]);\n\n  const onStageChange = (index: number, stage: StartupStage) => {\n    const { name, stages } = progress;\n    stages[index] = stage;\n    const newProgress = { name, stages };\n    setStartupProgress(newProgress);\n    progressService.saveStartupProgress(newProgress);\n  };\n\n  useEffect(() => {\n    const firstUncompletedStageIndex = progress.stages?.findIndex((stage) =>\n      stage.steps.some((step) => !step.completed)\n    );\n\n    if (firstUncompletedStageIndex === undefined) {\n      return;\n    }\n\n    if (firstUncompletedStageIndex === -1) {\n      onComplete();\n    }\n\n    setActiveStepIndex(firstUncompletedStageIndex);\n  }, [progress, onComplete]);\n\n  return (\n    <div className=\"w-full sm:w-80 p-10 bg-white sm:shadow-lg sm:rounded\">\n      {status.loading ? <p>Loading...</p> : null}\n      {status.error ? (\n        <p>Whoops, something went wrong on our servers...</p>\n      ) : null}\n      {status.finish ? <p>Finish</p> : null}\n\n      {status.edit ? (\n        <>\n          <h1 className=\"font-bold text-xl mb-5 select-none\">\n            {progress.name}\n          </h1>\n          <ol>\n            {progress.stages.map((stage, index) => (\n              <ProgressStage\n                index={index}\n                stage={stage}\n                key={`stage-${index}`}\n                disabled={index !== activeStepIndex}\n                completed={\n                  (activeStepIndex !== null && index < activeStepIndex) ||\n                  activeStepIndex === -1\n                }\n                onChange={onStageChange}\n              />\n            ))}\n          </ol>\n        </>\n      ) : null}\n    </div>\n  );\n};\n\nexport default ProgressPanel;\n","import React, { useEffect, useState } from \"react\";\n\nexport type GetRandomText = () => Promise<string>;\n\nconst RandomTextCard = ({\n  getRandomText,\n  onOk,\n}: {\n  getRandomText: GetRandomText;\n  onOk: () => void;\n}) => {\n  const [text, setText] = useState(\"Loading ...\");\n\n  useEffect(() => {\n    getRandomText()\n      .then((randomText) => setText(randomText))\n      .catch(() => setText(\"Error loading random text!\"));\n  }, [getRandomText]);\n\n  return (\n    <div className=\"w-full sm:w-80 p-10 bg-white sm:shadow-lg sm:rounded\">\n      <p className=\"min-h-16\">{text}</p>\n      <button\n        type=\"button\"\n        className=\"justify-self-end mt-8 mx-auto block items-center px-5 py-2 border border-transparent text-sm leading-4 font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n        onClick={onOk}\n      >\n        Ok\n      </button>\n    </div>\n  );\n};\n\nexport default RandomTextCard;\n","import {\n  StartupProgress,\n  StartupProgressService,\n} from \"../components/ProgressPanel\";\n\nconst DEFAULT_STARTUP_PROGRESS: StartupProgress = {\n  name: \"My startup progress\",\n  stages: [\n    {\n      name: \"Foundation\",\n      steps: [\n        { name: \"Setup virtual office\", completed: false },\n        { name: \"Set mission & vision\", completed: false },\n        { name: \"Select business name\", completed: false },\n        { name: \"Buy domains\", completed: false },\n      ],\n    },\n    {\n      name: \"Discovery\",\n      steps: [\n        { name: \"Create roadmap\", completed: false },\n        { name: \"Competitor analysis\", completed: false },\n      ],\n    },\n    {\n      name: \"Delivery\",\n      steps: [\n        { name: \"Release marketing website\", completed: false },\n        { name: \"Release MVP\", completed: false },\n      ],\n    },\n  ],\n};\n\nconst STARTUP_PROFRESS_KEY = \"startupProgress\";\n\nconst LocalStorageProgressService: StartupProgressService = {\n  async initStartupProgress() {\n    localStorage.setItem(\n      STARTUP_PROFRESS_KEY,\n      JSON.stringify(DEFAULT_STARTUP_PROGRESS)\n    );\n    return DEFAULT_STARTUP_PROGRESS;\n  },\n\n  async loadStartupProgress() {\n    const item = localStorage.getItem(STARTUP_PROFRESS_KEY);\n    if (item) {\n      return JSON.parse(item) as StartupProgress;\n    }\n\n    return LocalStorageProgressService.initStartupProgress();\n  },\n\n  async saveStartupProgress(progress: StartupProgress) {\n    localStorage.setItem(STARTUP_PROFRESS_KEY, JSON.stringify(progress));\n  },\n};\n\nexport default LocalStorageProgressService;\n","import { GetRandomText } from \"../components/RandomTextCard\";\n\nexport const getUselessFact: GetRandomText = async () =>\n  new Promise(async (resolve, reject) => {\n    const response = await fetch(\"https://uselessfacts.jsph.pl/random.json\");\n    if (response === undefined) {\n      return reject();\n    }\n\n    const data = await response.json();\n    if (data === undefined) {\n      return reject();\n    }\n\n    const { text } = data;\n\n    if (text === undefined) {\n      return reject();\n    }\n\n    resolve(text);\n  });\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport ProgressPanel from \"./components/ProgressPanel\";\nimport RandomTextCard from \"./components/RandomTextCard\";\nimport LocalStorageProgressService from \"./services/ProgressService\";\nimport { getUselessFact } from \"./services/UselessFactService\";\n\nfunction App() {\n  const [completed, setCompleted] = useState(false);\n\n  return (\n    <div className=\"sm:grid sm:place-items-center w-screen h-screen sm:bg-gradient-to-r from-gray-200 to=gray-300\">\n      {completed ? (\n        <RandomTextCard\n          getRandomText={getUselessFact}\n          onOk={() => {\n            LocalStorageProgressService.initStartupProgress();\n            setCompleted(false);\n          }}\n        />\n      ) : (\n        <ProgressPanel\n          onComplete={() => setCompleted(true)}\n          progressService={LocalStorageProgressService}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}